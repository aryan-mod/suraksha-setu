import { type NextRequest, NextResponse } from "next/server"
import { createClient } from "@/lib/supabase/server"
import { language } from "@/lib/config" // Declare the language variable

export async function POST(request: NextRequest) {
  try {
    const { message, userId, location, context } = await request.json()

    // Initialize Supabase client for user context
    const supabase = await createClient()

    let userProfile = null
    let safetyScore = 95
    let emergencyContacts = []

    // Get user context if userId provided
    if (userId) {
      const { data: profile } = await supabase
        .from("profiles")
        .select("*, emergency_contacts(*)")
        .eq("id", userId)
        .single()

      if (profile) {
        userProfile = profile
        safetyScore = profile.safety_score || 95
        emergencyContacts = profile.emergency_contacts || []
      }
    }

    // Try Gemini API first, fallback to enhanced responses
    let response: string

    if (process.env.GEMINI_API_KEY) {
      try {
        response = await generateGeminiResponse(message, language, {
          userProfile,
          location,
          safetyScore,
          emergencyContacts,
          context,
        })
      } catch (error) {
        console.log("[v0] Gemini API failed, using fallback:", error)
        response = generateEnhancedAIResponse(message, language, {
          userProfile,
          location,
          safetyScore,
          emergencyContacts,
          context,
        })
      }
    } else {
      response = generateEnhancedAIResponse(message, language, {
        userProfile,
        location,
        safetyScore,
        emergencyContacts,
        context,
      })
    }

    // Log chat interaction for analytics
    if (userId) {
      await supabase.from("chat_logs").insert({
        user_id: userId,
        message: message,
        response: response,
        language: language,
        location: location,
        safety_score: safetyScore,
      })
    }

    return NextResponse.json({
      success: true,
      response,
      language,
      safetyScore,
      timestamp: new Date().toISOString(),
      emergencyDetected: isEmergencyMessage(message),
    })
  } catch (error) {
    console.error("[v0] AI Chat API Error:", error)
    return NextResponse.json(
      {
        success: false,
        error: "Failed to process AI request",
        fallbackResponse:
          language === "hi"
            ? "‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è 112 ‡§°‡§æ‡§Ø‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§"
            : "Sorry, technical issue. For emergencies, dial 112.",
      },
      { status: 500 },
    )
  }
}

async function generateGeminiResponse(message: string, language: string, context: any): Promise<string> {
  const systemPrompt = `You are SafeTour AI, an advanced tourist safety assistant. Context:
- User: ${context.userProfile?.full_name || "Tourist"}
- Location: ${context.location || "Unknown"}
- Safety Score: ${context.safetyScore}%
- Language: ${language === "hi" ? "Hindi" : "English"}
- Emergency Contacts: ${context.emergencyContacts?.length || 0} available

Guidelines:
1. Prioritize safety and emergency responses
2. Provide location-specific advice
3. Use appropriate language (${language === "hi" ? "Hindi" : "English"})
4. Be concise but comprehensive
5. Include relevant emojis and formatting
6. For emergencies, provide immediate actionable steps

Respond naturally and helpfully to: "${message}"`

  const response = await fetch(
    "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=" +
      process.env.GEMINI_API_KEY,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: systemPrompt,
              },
            ],
          },
        ],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        },
      }),
    },
  )

  if (!response.ok) {
    throw new Error(`Gemini API error: ${response.status}`)
  }

  const data = await response.json()
  return data.candidates?.[0]?.content?.parts?.[0]?.text || "I'm here to help with your safety needs."
}

function generateEnhancedAIResponse(message: string, language: string, context: any): string {
  const lowerMessage = message.toLowerCase()
  const userName = context.userProfile?.full_name || (language === "hi" ? "‡§Ø‡§æ‡§§‡•ç‡§∞‡•Ä" : "Traveler")
  const location = context.location || (language === "hi" ? "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§ ‡§∏‡•ç‡§•‡§æ‡§®" : "Unknown location")
  const safetyScore = context.safetyScore || 95

  if (language === "hi") {
    if (isEmergencyMessage(message)) {
      return `üö® ${userName}, ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡§æ ‡§™‡§§‡§æ ‡§ö‡§≤‡§æ!

‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§ï‡§æ‡§∞‡•ç‡§Ø:
‚úÖ ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à
‚úÖ ‡§Ü‡§™‡§ï‡•á ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï‡•ã‡§Ç ‡§ï‡•ã ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§≠‡•á‡§ú‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à
‚úÖ ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ: ${location}
‚úÖ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§∏‡•ç‡§ï‡•ã‡§∞: ${safetyScore}%

üìû ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç:
‚Ä¢ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤: 112
‚Ä¢ ‡§™‡•Å‡§≤‡§ø‡§∏: 100
‚Ä¢ ‡§è‡§Æ‡•ç‡§¨‡•Å‡§≤‡•á‡§Ç‡§∏: 108

‡§ï‡•É‡§™‡§Ø‡§æ ‡§∂‡§æ‡§Ç‡§§ ‡§∞‡§π‡•á‡§Ç, ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§Ü ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡•Å‡§°‡§º‡•á ‡§∞‡§π‡•á‡§Ç‡•§`
    }

    if (lowerMessage.includes("‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ") || lowerMessage.includes("safety")) {
      return `üõ°Ô∏è ${userName}, ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü:

üìç ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡•ç‡§•‡§æ‡§®: ${location}
üìä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§∏‡•ç‡§ï‡•ã‡§∞: ${safetyScore}%
${safetyScore >= 90 ? "‚úÖ ‡§â‡§ö‡•ç‡§ö ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞" : safetyScore >= 70 ? "‚ö†Ô∏è ‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ - ‡§∏‡§æ‡§µ‡§ß‡§æ‡§® ‡§∞‡§π‡•á‡§Ç" : "üö® ‡§ï‡§Æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ - ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∏‡•ç‡§•‡§æ‡§® ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç"}

üè• ‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Ç:
‚Ä¢ ‡§™‡•Å‡§≤‡§ø‡§∏ ‡§∏‡•ç‡§ü‡•á‡§∂‡§®: 500m
‚Ä¢ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤: 1.2km  
‚Ä¢ ‡§™‡§∞‡•ç‡§Ø‡§ü‡§ï ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ: 800m

‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§π‡•à?`
    }

    if (lowerMessage.includes("‡§¶‡§ø‡§∂‡§æ") || lowerMessage.includes("location") || lowerMessage.includes("‡§∞‡§æ‡§∏‡•ç‡§§‡§æ")) {
      return `üìç ${userName}, ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡•ç‡§•‡§æ‡§® ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä:

üó∫Ô∏è ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§®: ${location}
üéØ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§∏‡•ç‡§ï‡•ã‡§∞: ${safetyScore}%

üè¢ ‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∏‡•ç‡§•‡§æ‡§®:
1. ‡§π‡•ã‡§ü‡§≤/‡§∞‡§ø‡§∏‡•â‡§∞‡•ç‡§ü - 300m (2 ‡§Æ‡§ø‡§®‡§ü)
2. ‡§™‡•Å‡§≤‡§ø‡§∏ ‡§∏‡•ç‡§ü‡•á‡§∂‡§® - 500m (3 ‡§Æ‡§ø‡§®‡§ü)  
3. ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ - 1.2km (8 ‡§Æ‡§ø‡§®‡§ü)
4. ‡§™‡§∞‡•ç‡§Ø‡§ü‡§ï ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ - 800m (5 ‡§Æ‡§ø‡§®‡§ü)

‡§ï‡§ø‡§∏ ‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡§æ ‡§∞‡§æ‡§∏‡•ç‡§§‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?`
    }

    return `‡§®‡§Æ‡§∏‡•ç‡§§‡•á ${userName}! ‡§Æ‡•à‡§Ç SafeTour AI ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•Ç‡§Ç‡•§

üéØ ‡§Ü‡§™‡§ï‡•Ä ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡•ç‡§•‡§ø‡§§‡§ø:
üìç ‡§∏‡•ç‡§•‡§æ‡§®: ${location}
üõ°Ô∏è ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ: ${safetyScore}%

‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç:
‚Ä¢ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ üö®
‚Ä¢ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä üõ°Ô∏è
‚Ä¢ ‡§¶‡§ø‡§∂‡§æ-‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂ üó∫Ô∏è
‚Ä¢ ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï üìû

‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?`
  } else {
    if (isEmergencyMessage(message)) {
      return `üö® ${userName}, EMERGENCY DETECTED!

Immediate Actions:
‚úÖ Notifying local authorities
‚úÖ Alerting your emergency contacts
‚úÖ Location shared: ${location}
‚úÖ Safety Score: ${safetyScore}%

üìû Call Immediately:
‚Ä¢ Emergency: 112
‚Ä¢ Police: 100  
‚Ä¢ Ambulance: 108
‚Ä¢ Tourist Helpline: 1363

Stay calm, help is on the way. Keep this chat open for updates.`
    }

    if (lowerMessage.includes("safety") || lowerMessage.includes("secure")) {
      return `üõ°Ô∏è ${userName}, Your Safety Report:

üìç Current Location: ${location}
üìä Safety Score: ${safetyScore}%
${safetyScore >= 90 ? "‚úÖ High Safety Zone" : safetyScore >= 70 ? "‚ö†Ô∏è Moderate Safety - Stay Alert" : "üö® Low Safety - Move to Safe Zone"}

üè• Nearest Facilities:
‚Ä¢ Police Station: 500m away
‚Ä¢ Hospital: 1.2km away
‚Ä¢ Tourist Help Center: 800m away

Any specific safety concerns?`
    }

    if (lowerMessage.includes("location") || lowerMessage.includes("direction") || lowerMessage.includes("where")) {
      return `üìç ${userName}, Your Location Info:

üó∫Ô∏è Current: ${location}
üéØ Safety Score: ${safetyScore}%

üè¢ Nearest Safe Locations:
1. Hotel/Resort - 300m (2 min walk)
2. Police Station - 500m (3 min walk)
3. Hospital - 1.2km (8 min walk)  
4. Tourist Center - 800m (5 min walk)

Need directions to any specific place?`
    }

    return `Hello ${userName}! I'm SafeTour AI Assistant.

üéØ Your Current Status:
üìç Location: ${location}
üõ°Ô∏è Safety: ${safetyScore}%

I can help you with:
‚Ä¢ Emergency assistance üö®
‚Ä¢ Safety information üõ°Ô∏è
‚Ä¢ Directions & navigation üó∫Ô∏è
‚Ä¢ Local contacts üìû

How can I assist you today?`
  }
}

function isEmergencyMessage(message: string): boolean {
  const emergencyKeywords = [
    "emergency",
    "help",
    "sos",
    "danger",
    "attack",
    "robbery",
    "accident",
    "‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤",
    "‡§∏‡§π‡§æ‡§Ø‡§§‡§æ",
    "‡§ñ‡§§‡§∞‡§æ",
    "‡§π‡§Æ‡§≤‡§æ",
    "‡§ö‡•ã‡§∞‡•Ä",
    "‡§¶‡•Å‡§∞‡•ç‡§ò‡§ü‡§®‡§æ",
  ]

  return emergencyKeywords.some((keyword) => message.toLowerCase().includes(keyword.toLowerCase()))
}
